{"version":3,"sources":["indicators.test.js"],"names":["mock","test","indicators","version","autor","fecha","uf","codigo","nombre","unidad_medida","valor","ivp","payload","data","axios","get","jest","fn","mockResolvedValue","expect","resolves","toEqual","indicator","serie"],"mappings":"AAOA,cAAKA,IAAL,CAAU,OAAV;;;;;;AAPA;;AACA;;;;;;;;;;;;;AAOAC,IAAI,CAAC,mBAAD,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,UAAAA,UADkB,GACL;AACjBC,YAAAA,OAAO,EAAE,OADQ;AAEjBC,YAAAA,KAAK,EAAE,eAFU;AAGjBC,YAAAA,KAAK,EAAE,0BAHU;AAIjBC,YAAAA,EAAE,EAAE;AACFC,cAAAA,MAAM,EAAE,IADN;AAEFC,cAAAA,MAAM,EAAE,wBAFN;AAGFC,cAAAA,aAAa,EAAE,OAHb;AAIFJ,cAAAA,KAAK,EAAE,0BAJL;AAKFK,cAAAA,KAAK,EAAE;AALL,aAJa;AAWjBC,YAAAA,GAAG,EAAE;AACHJ,cAAAA,MAAM,EAAE,KADL;AAEHC,cAAAA,MAAM,EAAE,gCAFL;AAGHC,cAAAA,aAAa,EAAE,OAHZ;AAIHJ,cAAAA,KAAK,EAAE,0BAJJ;AAKHK,cAAAA,KAAK,EAAE;AALJ;AAXY,WADK;AAoBlBE,UAAAA,OApBkB,GAoBR;AAACC,YAAAA,IAAI,EAAEX;AAAP,WApBQ;AAsBxBY,yBAAMC,GAAN,GAAYC,IAAI,CAACC,EAAL,GAAUC,iBAAV,CAA4BN,OAA5B,CAAZ;AAtBwB;AAAA,4CAuBlBO,MAAM,CAAC,oCAAD,CAAN,CAA4BC,QAA5B,CAAqCC,OAArC,CAA6CnB,UAA7C,CAvBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,CAAJ;AA0BAD,IAAI,CAAC,mBAAD,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBqB,UAAAA,SADkB,GACN;AAChBnB,YAAAA,OAAO,EAAE,OADO;AAEhBC,YAAAA,KAAK,EAAE,eAFS;AAGhBG,YAAAA,MAAM,EAAE,IAHQ;AAIhBC,YAAAA,MAAM,EAAE,wBAJQ;AAKhBC,YAAAA,aAAa,EAAE,OALC;AAMhBc,YAAAA,KAAK,EAAE,CACL;AACElB,cAAAA,KAAK,EAAE,0BADT;AAEEK,cAAAA,KAAK,EAAE;AAFT,aADK,EAKL;AACEL,cAAAA,KAAK,EAAE,0BADT;AAEEK,cAAAA,KAAK,EAAE;AAFT,aALK;AANS,WADM;AAkBlBE,UAAAA,OAlBkB,GAkBR;AAACC,YAAAA,IAAI,EAAES;AAAP,WAlBQ;AAoBxBR,yBAAMC,GAAN,GAAYC,IAAI,CAACC,EAAL,GAAUC,iBAAV,CAA4BN,OAA5B,CAAZ;AApBwB;AAAA,4CAqBlBO,MAAM,CAAC,wCAAuB,IAAvB,CAAD,CAAN,CAAqCC,QAArC,CAA8CC,OAA9C,CAAsDC,SAAtD,CArBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,CAAJ","sourcesContent":["import axios from 'axios';\nimport {\n  findAllIndicators,\n  findOneIndicatorByName,\n} from '../../src/API/Repository/Indicators';\n\n// Notice how `create` was not being mocked here...\njest.mock('axios');\ntest('get al indicators', async () => {\n  const indicators = {\n    version: '1.7.0',\n    autor: 'mindicador.cl',\n    fecha: '2022-01-06T21:00:00.000Z',\n    uf: {\n      codigo: 'uf',\n      nombre: 'Unidad de fomento (UF)',\n      unidad_medida: 'Pesos',\n      fecha: '2022-01-06T03:00:00.000Z',\n      valor: 31021.67,\n    },\n    ivp: {\n      codigo: 'ivp',\n      nombre: 'Indice de valor promedio (IVP)',\n      unidad_medida: 'Pesos',\n      fecha: '2022-01-06T03:00:00.000Z',\n      valor: 31797.28,\n    },\n  };\n  const payload = {data: indicators};\n  // Now mock axios get method\n  axios.get = jest.fn().mockResolvedValue(payload);\n  await expect(findAllIndicators()).resolves.toEqual(indicators);\n});\n\ntest('get one indicator', async () => {\n  const indicator = {\n    version: '1.7.0',\n    autor: 'mindicador.cl',\n    codigo: 'uf',\n    nombre: 'Unidad de fomento (UF)',\n    unidad_medida: 'Pesos',\n    serie: [\n      {\n        fecha: '2022-01-06T03:00:00.000Z',\n        valor: 31021.67,\n      },\n      {\n        fecha: '2022-01-05T03:00:00.000Z',\n        valor: 31016.68,\n      },\n    ],\n  };\n  const payload = {data: indicator};\n  // Now mock axios get method\n  axios.get = jest.fn().mockResolvedValue(payload);\n  await expect(findOneIndicatorByName('uf')).resolves.toEqual(indicator);\n});\n"]}